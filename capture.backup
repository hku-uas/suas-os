import time
from datetime import datetime
from pathlib import Path
from threading import Thread

import cv2

# class ThreadedCamera(object):
#     def __init__(self, src=0):
#         self.capture = cv2.VideoCapture(src)
#         self.capture.set(cv2.CAP_PROP_BUFFERSIZE, 2)
#
#         self.fps = 20
#         self.ms_per_frame = int((1 / self.fps) * 1000)
#
#         self.thread = Thread(target=self.update, args=())
#         self.thread.daemon = True
#         self.thread.start()
#
#     def update(self):
#         while True:
#             if self.capture.isOpened():
#                 (self.status, self.frame) = self.capture.read()
#             time.sleep(self.fps)


output_dir = Path(".") / "video_output"
if not output_dir.exists():
    output_dir.mkdir(exist_ok=True)

cap = cv2.VideoCapture(0)
video_codec = cv2.VideoWriter_fourcc(*"mp4v")

fps = 30
ms_per_frame = int((1 / fps) * 1000)
width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
halt = False

while not halt:
    video_file = output_dir / (datetime.now().strftime('%Y-%m-%dT%H:%M:%S') + '.mp4')
    video_writer = cv2.VideoWriter(str(video_file.resolve()), video_codec, fps, (int(cap.get(3)), int(cap.get(4))))
    seg_start_time = time.time()

    frame_cnt = 0

    while time.time() - seg_start_time < 5:
        ret, frame = cap.read()
        frame_cnt += 1
        video_writer.write(frame)
        cv2.imshow("frame", frame)

        if cv2.waitKey(ms_per_frame) & 0xFF == ord("q"):
            halt = True
            break

    print(f"{time.time() - seg_start_time}s past. frame_cnt = {frame_cnt}.")
    video_writer.release()

cap.release()
cv2.destroyAllWindows()
